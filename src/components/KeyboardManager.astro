---
import 'hotkeypad/reset.css';
import 'hotkeypad/index.css';
import { type SocialIcon } from '@/types';
import type { Language } from '@/constants';

interface Props {
  data: import('@/cv').CV;
}

const { data: cvData } = Astro.props;

// Get current language from Astro's i18n
const currentLang = (Astro.currentLocale || 'en') as Language;

// Internationalized strings
const i18nStrings = {
  en: {
    footerText: 'Press Cmd + K to open command palette.',
    visitText: 'Visit',
    searchPlaceholder: 'Search command',
    exportPDFText: 'Export as PDF',
    actionsSection: 'Actions',
  },
  es: {
    footerText: 'Pulsa Cmd + K para abrir la paleta de comandos.',
    visitText: 'Visitar',
    searchPlaceholder: 'Buscar comando',
    exportPDFText: 'Exportar como PDF',
    actionsSection: 'Acciones',
  },
};

const strings = i18nStrings[currentLang];
const { profiles } = cvData.basics;

const SOCIAL_ICONS: SocialIcon = {
  GitHub: `<svg
  width="16"
  height="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><path
    fill="currentColor"
    d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
  ></path></svg
>`,
  LinkedIn: `<svg
  height="16"
  width="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><title>LinkedIn</title><path
    fill="currentColor"
    d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
  ></path></svg
>`,
  X: `<svg
  width="16"
  height="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  style="margin-right: 8px"
  ><title>X</title><path
    fill="currentColor"
    d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z"
  ></path></svg
>
`,
};

const profilesInfo = profiles.map(({ network, url }) => {
  const icon = SOCIAL_ICONS[network];
  const firstLetter = network[0].toUpperCase();

  return {
    id: network,
    section: 'Social',
    title: `${strings.visitText} ${network}`,
    url,
    icon,
    hotkey: `ctrl+${firstLetter}`,
  };
});
---

<footer id="normal-footer" class="no-print">
  {
    currentLang === 'en' ? (
      <>
        Press <kbd>Cmd</kbd> + <kbd>K</kbd> to open command palette.
      </>
    ) : (
      <>
        Pulsa <kbd>Cmd</kbd> + <kbd>K</kbd> para abrir la paleta de comandos.
      </>
    )
  }
</footer>

<div id="footer-button" class="no-print">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="icon icon-tabler icon-tabler-command"
    width="32"
    height="32"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="#777"
    fill="none"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
    <path
      d="M7 9a2 2 0 1 1 2 -2v10a2 2 0 1 1 -2 -2h10a2 2 0 1 1 -2 2v-10a2 2 0 1 1 2 2h-10"
    ></path>
  </svg>
</div>

<div
  id="hotkeypad"
  data-placeholder={strings.searchPlaceholder}
  data-info={JSON.stringify(profilesInfo)}
>
</div>

<script
  define:vars={{
    exportPDFText: strings.exportPDFText,
    actionsSection: strings.actionsSection,
  }}
  is:inline
>
  // Wait for window to load and try to access HotKeyPad from global scope or CDN
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Try to import the module
      const { default: HotKeyPad } = await import(
        '/node_modules/hotkeypad/dist/index.js'
      );

      const hotkeypad = new HotKeyPad();
      const info = hotkeypad.instance.getAttribute('data-info') ?? '[]';
      const parsedInfo = JSON.parse(info);

      const data = parsedInfo.map(
        ({ url, hotkey, icon, id, section, title }) => {
          return {
            id,
            title,
            icon,
            hotkey,
            section,
            handler: () => {
              window.open(url, '_blank');
            },
          };
        }
      );
      hotkeypad.setCommands([
        {
          id: 'export-pdf',
          title: exportPDFText,
          icon: `<svg style="margin-right: 8px" width="16" height="16" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
  <path stroke-linecap="round" stroke-linejoin="round" d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
  <polyline points="7,10 12,15 17,10" />
  <line x1="12" y1="15" x2="12" y2="3" />
</svg>`,
          hotkey: 'ctrl+P',
          section: actionsSection,
          handler: () => {
            // Create a temporary anchor element to trigger download
            const link = document.createElement('a');
            link.href = '/pdf/cv.pdf';
            link.download = 'CV.pdf';
            link.target = '_blank';

            // Trigger download
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            console.log('PDF download triggered from command palette');
          },
        },
        ...data,
      ]);

      const footerButton = document.getElementById('footer-button');
      footerButton?.addEventListener('click', () => {
        var event = new KeyboardEvent('keydown', {
          key: 'K',
          code: 'KeyK',
          keyCode: 75,
          which: 75,
          ctrlKey: true,
          altKey: false,
          shiftKey: false,
          metaKey: false,
        });

        document.dispatchEvent(event);
      });
    } catch (error) {
      console.error('Failed to load HotKeyPad:', error);
    }
  });
</script>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @media (min-width: 601px) {
    #normal-footer {
      display: block;
    }

    #footer-button {
      display: none;
    }
  }

  @media (max-width: 600px) {
    #normal-footer {
      display: none;
    }

    #footer-button {
      background: #fff;
      position: fixed;
      border: 1px solid #eee;
      right: 10px;
      bottom: 10px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }
  }

  footer {
    background: #fdfdfd;
    border-top: 1px solid #eee;
    position: fixed;
    bottom: 0px;
    width: 100%;
    padding-block: 8px;
    text-align: center;
    font-size: 0.85rem;

    z-index: 2;

    view-timeline-name: --revealing;
    view-timeline-axis: block;

    animation: linear 0.3s fadeIn;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 10%;
  }

  kbd {
    background: #eee;
    border-radius: 4px;
    padding: 2px 4px;
    font-size: 12px;
  }
</style>
