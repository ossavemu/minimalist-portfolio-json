---
import type { Language } from '@/constants';
import { META_DEFAULTS } from '@/constants';
import { getCVData } from '@/i18n';

interface Props {
  title: string;
  currentLang: Language;
}

const { title, currentLang } = Astro.props;

const cvData = getCVData(currentLang);
const { image, summary, url } = cvData.basics;
---

<!doctype html>
<html lang={currentLang}>
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="description" content={summary} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preload" as="image" href={image} />

    <meta property="og:url" content={url} />
    <meta property="og:type" content={META_DEFAULTS.OG_TYPE} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={summary} />
    <meta property="og:image" content="" />

    <meta name="twitter:card" content={META_DEFAULTS.TWITTER_CARD} />
    <meta property="twitter:domain" content={url.split('//')[1] ?? ''} />
    <meta property="twitter:url" content={url} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={summary} />
    <meta name="twitter:image" content="" />
  </head>
  <body>
    <slot />
  </body>
</html>

<style is:global>
  html {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      'Courier New',
      Courier,
      monospace;
    background: transparent;
    letter-spacing: -0.025rem;
    overflow-x: hidden;
  }

  body,
  figure {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
  }

  body {
    /* Background */
    background-image: url('/bg.webp');
    background-color: rgba(255, 255, 255, 0.18);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-blend-mode: screen;

    /* Layout */
    display: flex;
    flex-direction: column;
    min-height: 100vh;

    /* Scrollbar */
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  body::-webkit-scrollbar {
    display: none;
  }

  a {
    text-decoration: none;
    color: #2563eb;
    font-weight: 500;
    transition: color 0.2s ease;
  }

  a:hover {
    color: #1d4ed8;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  /* Improve readability for other text elements */
  span, 
  div, 
  time {
    color: #475569;
  }

  /* Make important text more readable */
  strong, 
  b {
    color: #1e293b;
    font-weight: 600;
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  h1,
  h2,
  h3,
  h4 {
    margin: 0;
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont,
      'Segoe UI',
      Roboto,
      Oxygen,
      Ubuntu,
      Cantarell,
      'Open Sans',
      'Helvetica Neue',
      sans-serif;
    color: #1e293b;
    text-shadow: 0 1px 2px rgba(255, 255, 255, 0.3);
    font-weight: 700;
  }

  p {
    color: #334155;
    font-size: 0.9rem;
    line-height: 1.6;
    margin: 0;
    text-wrap: pretty;
    font-weight: 500;
    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.2);
  }

  .print {
    display: none !important;
  }

  @media print {
    .no-print {
      display: none !important;
    }

    .print {
      display: block !important;
    }

    astro-dev-toolbar {
      display: none !important;
    }

    article {
      break-inside: avoid;
    }
  }
</style>
